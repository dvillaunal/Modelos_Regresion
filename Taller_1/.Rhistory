<<<<<<< Updated upstream
=======
plot(datos4$CRIM, residuales_estudentizados,
xlab = "CRIM",main = "Residuales vs. CRIM")
plot(datos4$NOX, residuales_estudentizados,
xlab = "NOX", main = "Residuales vs. NOX")
plot(datos4$RM, residuales_estudentizados,
xlab = "RM", main = "Residuales vs. RM")
plot(datos4$AGE, residuales_estudentizados,
xlab = "AGE", main = "Residuales vs. AGE")
plot(datos4$PTRATIO, residuales_estudentizados,
xlab = "PTRATIO", main = "Residuales vs. PTRATIO")
plot(datos4$LSTAT, residuales_estudentizados,
xlab = "LSTAT", main = "Residuales vs. LSTAT")
#| echo: false
par(mfrow=c(2,3))
plot(datos4$CRIM, residuales_estudentizados,
xlab = "CRIM",,ylab = "",
main = "Residuales vs. CRIM")
plot(datos4$NOX, residuales_estudentizados,
xlab = "NOX", main = "Residuales vs. NOX")
plot(datos4$RM, residuales_estudentizados,
xlab = "RM", main = "Residuales vs. RM")
plot(datos4$AGE, residuales_estudentizados,
xlab = "AGE", main = "Residuales vs. AGE")
plot(datos4$PTRATIO, residuales_estudentizados,
xlab = "PTRATIO", main = "Residuales vs. PTRATIO")
plot(datos4$LSTAT, residuales_estudentizados,
xlab = "LSTAT", main = "Residuales vs. LSTAT")
#| echo: false
par(mfrow=c(2,3))
plot(datos4$CRIM, residuales_estudentizados,
xlab = "CRIM",ylab = "",
main = "Residuales vs. CRIM")
plot(datos4$NOX, residuales_estudentizados,
xlab = "NOX", ylab = "",
main = "Residuales vs. NOX")
plot(datos4$RM, residuales_estudentizados,
xlab = "RM", ylab = "",
main = "Residuales vs. RM")
plot(datos4$AGE, residuales_estudentizados,
xlab = "AGE", ylab = "",
main = "Residuales vs. AGE")
plot(datos4$PTRATIO, residuales_estudentizados,
xlab = "PTRATIO", ylab = ""
main = "Residuales vs. PTRATIO")
#| echo: false
par(mfrow=c(2,3))
plot(datos4$CRIM, residuales_estudentizados,
xlab = "CRIM",ylab = "",
main = "Residuales vs. CRIM")
plot(datos4$NOX, residuales_estudentizados,
xlab = "NOX", ylab = "",
main = "Residuales vs. NOX")
plot(datos4$RM, residuales_estudentizados,
xlab = "RM", ylab = "",
main = "Residuales vs. RM")
plot(datos4$AGE, residuales_estudentizados,
xlab = "AGE", ylab = "",
main = "Residuales vs. AGE")
plot(datos4$PTRATIO, residuales_estudentizados,
xlab = "PTRATIO", ylab = "",
main = "Residuales vs. PTRATIO")
plot(datos4$LSTAT, residuales_estudentizados,
xlab = "LSTAT", ylab = "",
main = "Residuales vs. LSTAT")
qqnorm(residuales_estudentizados, main = "Gráfico Q-Q de Residuales Estudentizados")
qqline(residuales_estudentizados, col = "red")
#| echo: false
#| label: fig-resi3
#| fig-cap: "Gráfico Q-Q de Residuales Estudentizados"
qqnorm(residuales_estudentizados)
qqline(residuales_estudentizados, col = "red")
# Identificar outliers (residuales estudentizados fuera de [-3, 3])
outliers <- which(abs(residuales_estudentizados) > 3)
print(outliers)
# Identificar outliers (residuales estudentizados fuera de [-3, 3])
>>>>>>> Stashed changes
outliers <- which(abs(residuales_estudentizados) > 3)
outliers
# Identificar outliers (residuales estudentizados fuera de [-3, 3])
outliers <- which(abs(residuales_estudentizados) > 3)
outliers
# Calcular los valores de leverage (hat values)
leverage <- hatvalues(modelo)
# Identificar puntos con alto leverage (mayores a 2 veces el promedio)
puntos_balanceo <- which(leverage > 2 * mean(leverage))
print(puntos_balanceo)
# Gráfico de Leverage vs Residuales Estudentizados
plot(leverage, residuales_estudentizados,
xlab = "Leverage", ylab = "Residuales Estudentizados",
main = "Leverage vs Residuales Estudentizados")
abline(h = 0, col = "red")
# Gráfico de Cook’s Distance
plot(dist_cook, type = "h",
main = "Distancia de Cook para cada Observación",
ylab = "Distancia de Cook")
# Gráfico de Cook’s Distance
plot(dist_cook, type = "h",
main = "Distancia de Cook para cada Observación",
ylab = "Distancia de Cook")
# Gráfico de Cook’s Distance
plot(dist_cook, type = "h",
main = "Distancia de Cook para cada Observación",
ylab = "Distancia de Cook")
# Calcular la distancia de Cook
dist_cook <- cooks.distance(modelo)
# Identificar puntos influyentes (con Cook’s Distance mayor a 1)
puntos_influyentes <- which(dist_cook > 1)
print(puntos_influyentes)
# Calcular la distancia de Cook
dist_cook <- cooks.distance(modelo)
# Identificar puntos influyentes (con Cook’s Distance mayor a 1)
puntos_influyentes <- which(dist_cook > 1)
print(puntos_influyentes)
# Gráfico de Cook’s Distance
plot(dist_cook, type = "h",
main = "Distancia de Cook para cada Observación",
ylab = "Distancia de Cook")
abline(h = 1, col = "red")  # Línea de referencia en 1
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3, size=1.2,
method = "lm")),lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3, size=1.2,
method = "lm")),lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3, size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3, size=1.2,method = "lm")),lower=list(continuous ="cor"))
#| include: false
#| warning: false
library(car)
library(rsm)
library(rgl)
library(scatterplot3d)
library(GGally)
library(xtable)
library(magrittr)
library(glue)
library(pander)
library(kableExtra)
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| include: false
#| warning: false
library(car)
library(rsm)
library(rgl)
library(scatterplot3d)
library(GGally)
library(xtable)
library(magrittr)
library(glue)
library(pander)
library(kableExtra)
library(tidyverse)
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",alpha = 0.3,
size=1.2,
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth",
method = "lm")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
gg2<-ggpairs(datos4,upper=list(continuous = wrap("smooth")),
lower=list(continuous ="cor"))
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
ggpairs(datos4)
datos_limpios <- datos4[-c(90:100), ]
datos_limpios <- datos4[-c(91:100), ]
datos_limpios <- datos4[-c(91:100), ]
# Ajustar el modelo sin las observaciones problemáticas
modelo_ajustado <- lm(MEDV ~ CRIM + NOX + RM + AGE + PTRATIO + LSTAT, data = datos_limpios)
# Resumen del modelo ajustado
summary(modelo_ajustado)
summary(modelo_ajustado)$coefficients
summary(modelo_ajustado)$coefficients %>% round(5)
summary(modelo_ajustado)$coefficients %>% round(5) %>% kable()
summary(modelo_ajustado)$coefficients %>% round(5) %>% kable(align = 'lcccc')
#| echo: false
#| label: tbl-resu_nuevo
#| tbl-cap: Resumen modelo nuevo
summary(modelo_ajustado)$coefficients %>% round(5) %>% kable(align = 'lcccc')
# Calcular los residuales estudentizados
residuales_estudentizados_ajustado <- rstudent(modelo_ajustado)
# Gráfico Q-Q de los residuales estudentizados
qqnorm(residuales_estudentizados_ajustado, main = "Gráfico Q-Q de Residuales Estudentizados Ajustado")
qqline(residuales_estudentizados_ajustado, col = "red")
# Gráfico Q-Q de los residuales estudentizados
qqnorm(residuales_estudentizados_ajustado, main = "Gráfico Q-Q de Residuales Estudentizados Ajustado")
qqline(residuales_estudentizados_ajustado, col = "red")
# Gráfico Q-Q de los residuales estudentizados
qqnorm(residuales_estudentizados_ajustado)
qqline(residuales_estudentizados_ajustado, col = "red")
#| echo: false
#| label: fig-resi3
#| fig-cap: "Gráfico Q-Q de Residuales Estudentizados Nuevo Ajuste"
qqnorm(residuales_estudentizados_ajustado)
qqline(residuales_estudentizados_ajustado, col = "red")
# Ajustar el modelo sin las observaciones problemáticas
modelo_ajustado <- lm(MEDV ~., data = datos_limpios)
#| echo: false
#| label: fig-resi
#| fig-cap: "Residuales Estudentizados vs Valores ajustados"
residuales_estudentizados <- rstandard(modelo)
valores_ajustados <- fitted(modelo)
plot(valores_ajustados, residuales_estudentizados,
xlab = "Valores Ajustados", ylab = "Residuales Estudentizados")
abline(h = 0, col = "red")
#| echo: false
#| label: fig-resi2
#| fig-cap: "Residuales Estudentizados vs Cada Variable"
par(mfrow=c(2,3))
plot(datos4$CRIM, residuales_estudentizados,
xlab = "CRIM",ylab = "",
main = "Residuales vs. CRIM")
plot(datos4$NOX, residuales_estudentizados,
xlab = "NOX", ylab = "",
main = "Residuales vs. NOX")
plot(datos4$RM, residuales_estudentizados,
xlab = "RM", ylab = "",
main = "Residuales vs. RM")
plot(datos4$AGE, residuales_estudentizados,
xlab = "AGE", ylab = "",
main = "Residuales vs. AGE")
plot(datos4$PTRATIO, residuales_estudentizados,
xlab = "PTRATIO", ylab = "",
main = "Residuales vs. PTRATIO")
plot(datos4$LSTAT, residuales_estudentizados,
xlab = "LSTAT", ylab = "",
main = "Residuales vs. LSTAT")
#| echo: false
#| label: fig-resi3
#| fig-cap: "Gráfico Q-Q de Residuales Estudentizados"
qqnorm(residuales_estudentizados)
qqline(residuales_estudentizados, col = "red")
#| echo: false
#| label: fig-resi3
#| fig-cap: "Gráfico Q-Q de Residuales Estudentizados"
qqnorm(residuales_estudentizados)
qqline(residuales_estudentizados, col = "red")
# Identificar outliers (residuales estudentizados fuera de [-3, 3])
outliers <- which(abs(residuales_estudentizados) > 3)
outliers
# Identificar outliers (residuales estudentizados fuera de [-3, 3])
outliers <- which(abs(residuales_estudentizados) > 3)
outliers
outliers <- which(abs(residuales_estudentizados) > 3)
outliers
# Calcular los valores de leverage (hat values)
leverage <- hatvalues(modelo)
# Identificar puntos con alto leverage (mayores a 2 veces el promedio)
puntos_balanceo <- which(leverage > 2 * mean(leverage))
print(puntos_balanceo)
Calcular la distancia de Cook
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
# Gráfico de leverage vs. distancia de Cook
plot(cook, leverage, main = "Influencia y leverage",
xlab = "Distancia de Cook", ylab = "Leverage", pch = 20)
abline(h = umbral_leverage, col = "red", lty = 2)  # Umbral de leverage
# Gráfico de leverage vs. distancia de Cook
plot(cook, leverage, main = "Influencia y leverage",
xlab = "Distancia de Cook", ylab = "Leverage", pch = 20)
abline(h = umbral_leverage, col = "red", lty = 2)  # Umbral de leverage
# Calcular valores de leverage
leverage <- hatvalues(modelo)
# Umbral para leverage alto
umbral_leverage <- 2 * (length(coef(modelo)) / nrow(datos))
# Identificar observaciones con leverage alto
balanceo <- which(leverage > umbral_leverage)
print(balanceo)
# Calcular valores de leverage
leverage <- hatvalues(modelo)
# Umbral para leverage alto
umbral_leverage <- 2 * ((length(coef(modelo)) + 1) / nrow(datos))
# Identificar observaciones con leverage alto
balanceo <- which(leverage > umbral_leverage)
print(balanceo)
# Calcular valores de leverage
leverage <- hatvalues(modelo)
# Umbral para leverage alto
umbral_leverage <- 2 * ((length(coef(modelo)) + 1) / nrow(datos))
# Identificar observaciones con leverage alto
balanceo <- which(leverage > umbral_leverage)
print(balanceo)
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
# Gráfico de leverage vs. distancia de Cook
plot(cook, leverage, main = "Influencia y leverage",
xlab = "Distancia de Cook", ylab = "Leverage", pch = 20)
abline(h = umbral_leverage, col = "red", lty = 2)  # Umbral de leverage
abline(v = umbral_cook, col = "blue", lty = 2)    # Umbral de Cook
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
influenciales
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
influenciales
# Calcular valores de leverage
leverage <- hatvalues(modelo)
# Umbral para leverage alto
umbral_leverage <- 2 * ((length(coef(modelo)) + 1) / nrow(datos))
# Identificar observaciones con leverage alto
balanceo <- which(leverage > umbral_leverage)
print(balanceo)
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
influenciales
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
influenciales
# Calcular valores de leverage
leverage <- hatvalues(modelo)
# Umbral para leverage alto
umbral_leverage <- 2 * ((length(coef(modelo)) + 1) / nrow(datos4))
# Identificar observaciones con leverage alto
balanceo <- which(leverage > umbral_leverage)
print(balanceo)
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos4)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
influenciales
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos4)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
influenciales
<<<<<<< Updated upstream
#| include: false
#| warning: false
library(car)
library(rsm)
library(rgl)
library(scatterplot3d)
library(GGally)
library(xtable)
library(magrittr)
library(glue)
library(pander)
library(kableExtra)
library(tidyverse)
#| message: false
#| warning: false
#| echo: false
#| fig-width: 10
#| fig-height: 7
datos <- read.csv("Bases_de_datos/boston.csv")
datos4 <-datos[401:500,c(1,5,6,7,11,13,14)]
ggpairs(datos4)
#| fig-cap: Distribución de la variable respuesta `MEDV`
#| message: false
#| warning: false
datos4 %>% ggplot(aes(x=MEDV))+
geom_histogram(aes(y=..density..), fill="dodgerblue") +
geom_density(linewidth = 1.2) +
theme_bw() +
theme(axis.title.y = element_blank())
#| output-location: slide
shapiro.test(datos4$MEDV)
#| layout-ncol: 2
#| echo: false
#| message: false
datos4 %>% ggplot(aes(y=MEDV, x=RM)) +
geom_point() +
geom_smooth(se=F) +
theme_bw()
datos4 %>% ggplot(aes(y=MEDV, x=LSTAT)) +
geom_point() +
geom_smooth(se=F) +
theme_bw()
# Modelo de regresión lineal múltiple con todas las variables
modelo <- lm(MEDV~.,datos4)
#| echo: false
#| include: false
anova(modelo)
anova(modelo) %>% xtable()
100-6-1
100-3-1
96-93
# Crear el modelo completo
modelo_completo <- lm(MEDV ~ CRIM + NOX + RM + AGE + PTRATIO + LSTAT, data = tu_base_datos)
# Crear el modelo completo
modelo_completo <- lm(MEDV ~ CRIM + NOX + RM + AGE + PTRATIO + LSTAT, data = datos4)
# Crear el modelo reducido
modelo_reducido <- lm(MEDV ~ CRIM + NOX + LSTAT, data = datos4)
# Realizar prueba de sumas de cuadrados adicionales
anova_result <- anova(modelo_reducido, modelo_completo)
# Visualizar los resultados
print(anova_result)
# Calcular el estadístico F manualmente (opcional, usando los residuos)
SSE_MR <- sum(residuals(modelo_reducido)^2)  # Suma de cuadrados error modelo reducido
SSE_MF <- sum(residuals(modelo_completo)^2)  # Suma de cuadrados error modelo completo
# Grados de libertad
n <- nrow(tu_base_datos)  # Número de observaciones
# Grados de libertad
n <- nrow(datos4)  # Número de observaciones
q <- 3  # Número de coeficientes restringidos
p <- length(coef(modelo_completo))  # Número de coeficientes modelo completo
df_error <- n - p  # Grados de libertad residuales modelo completo
# Cálculo estadístico F
F_o <- ((SSE_MR - SSE_MF) / q) / (SSE_MF / df_error)
# Valor P asociado
valor_p <- pf(F_o, df1 = q, df2 = df_error, lower.tail = FALSE)
#| echo: false
# Imprimir resultados
cat("Estadístico F:", F_o, "\n")
cat("Valor p:", valor_p, "\n")
# Decisión
if (valor_p < 0.05) {
cat("Rechazamos H0: Al menos una de las variables (RM, AGE, PTRATIO) es significativa.\n")
} else {
cat("No rechazamos H0: Las variables (RM, AGE, PTRATIO) no son significativas en conjunto.\n")
}
=======
#| echo: false
#| include: false
anova(modelo)
# Calcular la distancia de Cook
cook <- cooks.distance(modelo)
# Umbral de influencia
umbral_cook <- 4 / nrow(datos4)
# Identificar observaciones influyentes
influenciales <- which(cook > umbral_cook)
influenciales
>>>>>>> Stashed changes
# Calcular valores de leverage
leverage <- hatvalues(modelo)
# Umbral para leverage alto
umbral_leverage <- 2 * ((length(coef(modelo)) + 1) / nrow(datos4))
# Identificar observaciones con leverage alto
balanceo <- which(leverage > umbral_leverage)
print(balanceo)
